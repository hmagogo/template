#!/usr/bin/env node
'use strict';
/**
 * Module dependencies.
 * http://www.cnblogs.com/chyingp/p/node-learning-guide-https.html
 */

var app = require('../app');
var debug = require('debug')('microblog:server');
var fs = require('fs');
var http = require('http');
var https = require('https');
var socketIo = require('socket.io');

require('../socket');

/**
 * Get port from environment and store in Express.
 */

var httpPort = normalizePort(process.env.PORT || '3000');
app.set('port', httpPort);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
server.listen(httpPort, function () {
    console.log('HTTP Server is running on: http://localhost:%s', httpPort);
});

/**
 * Create HTTPS server.
 */
var privateKey  = fs.readFileSync(process.cwd() + '/api_server/ssl/private.pem', 'utf8');
var certificate = fs.readFileSync(process.cwd() + '/api_server/ssl/file.crt', 'utf8');
var credentials = {key: privateKey, cert: certificate};
var SSLPORT = normalizePort(process.env.PORT || '3003');

var httpsServer = https.createServer(credentials, app);
httpsServer.listen(SSLPORT, function() {
    console.log('HTTPS Server is running on: https://localhost:%s', SSLPORT);
});

var io = socketIo.listen(server);   // 倾听http服务器并创建socket
io.set('log level', 1);             // 设置日志级别

/**
 * Listen on provided port, on all network interfaces.
 */
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * 连接后进行的处理
 */

io.on('connection', function (socket) {
    // 打印握手信息
    //console.log(socket.handshake);
    // 向前端发送的事件
    socket.emit('open', 'connection client');

    // 构建客户端对象
    var client = {
        socket: socket,
        name: false,
        color: getRandomColor()
    };

    // 对message事件的监听
    socket.on('message', function (msg) {
        var obj = {time: getNowTime(), color: client.color};

        obj.text = msg;
        obj.author = client.name;
        obj.type = 'message';

        socket.emit('message', obj);
        // 广播向其他用户发消息
        socket.broadcast.emit('message', obj);
    });
});

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * 获取随机抽起的颜色
 * @returns {string}
 */
var getRandomColor = function () {
    var colors = ['aquamarine', 'yellow', 'azure', 'aliceblue', 'feldspar', 'blanchedalmond', 'peachpuff',
    'tan', 'paleturquoise', 'lightpink', 'darkseagreen', 'mediumaquamarine', 'lightblue', 'khaki', 'thistle'];
    return colors[Math.round(Math.random() * 10000 % colors.length)];
};

/**
 *  获取现在的时间  小时：分钟：秒
 * @returns {string}
 */
var getNowTime = function () {
    var nowDate = new Date();
    return nowDate.getHours() + ':' + nowDate.getMinutes() + ':' + nowDate.getSeconds();
};
